name=Singleton Entwurfsmuster
description=Das Nutzen von etablierten Entwurfsmustern ist vorteilhaft fuer die Struktur und Architektur eines Programms. Will man, dass von einer Klasse EXAKT eine Instanz existiert, nutzt man das "Singleton" Entwurfsmuster. Joshua Bloch beschreibt in seinem Buch "Effective Java" drei zentrale Wege um das "Singleton" Pattern zu implementieren: ein oeffentliches "Instance"-Feld, eine oeffentliche statische "instance" Factory-Methode oder das Definieren der Klasse als einen Enum-Typen mit einer einzigen Konstante. Jeder Weg hat seine Vorteile, alle sind valide Optionen, welche mit dem Perfume belohnt werden. Joshua Blochs Meinung nach ist der Weg des Enum-Typen in den meisten Faellen der Beste, da man sich ueber (De-)Serialisierung keine Gedanken machen muss und der Code elegant ist.
source#1=J. Bloch: Effective Java, Kap. 2.3
additionalInformation=Das Perfume hat keine Praeferenzen zwischen den von Joshua Bloch beschriebenen Wegen. Aber, ist eine Klasse ein nicht-Enum Singleton und implementiert zudem das "java.io.Serializable" Interface, verifiziert das Perfume die (nach Joshua Bloch beschriebenen) noetigen Schritte, um dabei Bugs zu vermeiden: alle nicht-statischen Felder muessen "transient" sein und die Klasse muss eine "Object readResolve()" Methode bereitstellen, welche die Singleton-Instanz zurueckgibt.
