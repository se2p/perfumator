name=Defensive null Pruefung
description=Deklariert man eine Methode als \"public\", muss man sich im klaren sein, dass die Methode leicht von Code aufgerufen werden kann, ueber den man keine Kontrolle hat.\nDie Gefahr von Bugs und undefiniertem Verhalten ist vor allem dann praesent, wenn die Methode nicht-primitive Parametertypen, also Objekte, entgegen nimmt, da man auf uebergebene null-Werte gefasst sein muss. Um unerwarteten NullPointerExceptions zur Laufzeit vorzubeugen, prueft man, ob die nicht-primitiven Parameter der Methode nicht null sind, oder annotiert diese Parameter mit Annotationen wie \"@NotNull\" oder \"@Nonnull\", um dem Aufrufer klar zu signalisieren, dass eine Uebergabe von null fuer den entsprechenden Parameter verboten ist.\nEbenso kann man, wenn die Methode explizit die Uebergabe von null-Werten fuer bestimmte Parameter erlauben will, diese Parameter mit einer \"@Nullable\" Annotation versehen.\nVerwendung dieser Annotationen hat den klaren Vorteil, dass anderen Entwicklern schnell signalisiert wird, wie die Methode mit null-Werten umgeht, ohne dass diese in den Code schauen muessen.
source#1=Inspiriert durch: H. Osman, M. Lungu und O. Nierstrasz, \"Mining frequent bug-fix code changes,\" 2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE), Antwerpen, Belgien, 2014, s. 343-347, doi: 10.1109/CSMR-WCRE.2014.6747191
additionalInformation=Das Perfume setzt keine Limitierungen wie nach einer null-Pruefung fortgefahren werden soll, um die Moeglichkeiten der Entwickler nicht einzuschraenken. Zum Beispiel ist ein bekannter Weg, eine \"IllegalArgumentException\" zu werfen, sollte man keine null-Werte erlauben.